<!DOCTYPE html>
<html lang="en">

<%- include('../../partials/head') %>


  <body>

    <nav class="navbar navbar-expand-sm navbar-light bg-light shadow-3">
      <div class="container">
        <div class="d-flex">
          <!-- Botón para abrir el menú a la izquierda -->
          <button class="navbar-toggler d-lg-none order-0 me-2" type="button" data-bs-toggle="collapse"
            data-bs-target="#collapsibleNavId" aria-controls="collapsibleNavId" aria-expanded="false"
            aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
          </button>

          <!-- Botón para abrir el menú canvas a la derecha -->
          <button class="btn btn-transparent order-1" type="button" data-bs-toggle="offcanvas"
            data-bs-target="#offcanvasRight" aria-controls="offcanvasRight">
            <img id="userIconProfile"
              src="<%= /http/.test(userLogin.icon) ? userLogin.icon : `/images/iconsProfile/${userLogin.icon}` %>"
              class="iconProfile me-2" alt="" />
            <%= userLogin.name %><i class="fa-solid fa-caret-down fa-lg"></i>
          </button>
        </div>

        <!-- Menú de navegación -->
        <div class="collapse navbar-collapse" id="navbarNav">
          <ul class="navbar-nav ms-auto"> <!-- 'ms-auto' para alinear a la derecha -->
            <li class="nav-item">
              <a class="nav-link" href="/stock/partes">Regresar</a>
            </li>
          </ul>
        </div>
      </div>
    </nav> <br>

    <main>
      <%- include('../../partials/modals') %> <%- include('../../partials/canvasMenu') %>
      <div class="row ms-3 me-3 justify-content-center mb-5">
        <div class="col-md-12">

          <div class="card text-center mb-5">
            <div class="card-header" id="proyecto" data-fecha-inicio="<%= parte.createdAt %>" data-="">
              Parte semanal: <%= parte.nombre %> / <small>
                  <%= parte.expediente %>
                </small>
                <div class="container d-flex justify-content-center gap-2">
                  <button type="button" class="btn btn-primary btn-sm "><strong><i
                        class="fa-solid fa-screwdriver-wrench"></i> ideal: <%= ideal %> por <%= parte.unidadDuracion %>
                    </strong></button>
                  <button type="button" class="btn btn-success btn-sm"><strong><i
                        class="fa-solid fa-screwdriver-wrench"></i> real: <%= real %> por <%= parte.unidadDuracion %>
                    </strong></button>
                  <button type="button" id="buttonAvance" data-porcentaje-avance="<%= porcentajeAvance %>" class="btn btn-danger btn-sm"><strong><i class="fa-solid fa-percent"></i> de
                      avance: Proyecto al <%= porcentajeAvance %> %
                    </strong></button>
                </div>
            </div>
            <div class="card-body">
              <p class="card-text h6 text-justify">
                <%= parte.observaciones %> <% if (parte.remanentes === null) { %>
                  <button type="button" class="btn btn-danger custom-btn"
                    data-bs-toggle="modal" data-bs-target="#observaciones<%= parte.id %>" data-bs-whatever="@mdo">
                    <i class="fa-solid fa-pen-to-square"></i>
                  </button>
                <% } %> 

              </p>

              <div class="modal fade" id="observaciones<%= parte.id %>" tabindex="-1"
                aria-labelledby="observacionesLabel" aria-hidden="true">
                <div class="modal-dialog">
                  <div class="modal-content">
                    <div class="modal-header">
                      <h5 class="modal-title" id="observacionesLabel">Observaciones</h5>
                      <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">

                      <div class="mb-3 text-center">
                        <textarea class="form-control observaciones-input"
                          id="message-text"><%= parte.observaciones %></textarea>
                      </div>

                    </div>
                    <div class="modal-footer">
                      <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                      <button type="button" class="btn btn-primary actualizar-observaciones-btn">Enviar</button>
                    </div>
                  </div>
                </div>
              </div>
              <button type="button" class="btn btn-outline-primary  btn-sm mt-1 mb-2">
                <a class="btn-link" href="/stock/parte/<%= parte.id %>"><i class="fa-solid fa-download"></i>
                  Parte de stock</i></a>
              </button>
              <button type="button" class="btn btn-outline-danger  btn-sm mt-1 mb-2">
                <a class="btn-link" href="/stock/parteInsumos/<%= parte.id %>"><i class="fa-solid fa-download"></i>
                  Parte de insumos</i></a>
              </button>
              <button type="button" class="btn btn-outline-success ms-2  btn-sm mt-1 mb-2" id="enviarReporteBtn">
                <a class="btn-link" href="/stock/reporte/<%= parte.id %>"><i class="fa-solid fa-paper-plane"></i> Enviar
                  Reportes</i></a>
              </button>
            </div>
            <div class="card-footer text-muted"><i class="fa-solid fa-clock"></i> Última Actualización
              <%= new Intl.DateTimeFormat('es-AR', { year: 'numeric' , month: 'long' , day: 'numeric' , hour: 'numeric'
                , minute: 'numeric' , second: 'numeric' , timeZone: 'America/Argentina/Buenos_Aires' }).format(new
                Date(parte.updatedAt)) %>
            </div>
          </div>

          <!-- TABLA PARA EDICIÓN DE INFO -->

          <table class="table">
            <thead>
              <tr>
                <th scope="col">Producto</th>
                <th scope="col">Cantidad a Producir</th>
                <th scope="col">Cantidad Producida</th>
                <th scope="col">Stock en Taller</th>
                <th scope="col">Egresos</th>
              </tr>
            </thead>
            <tbody id="<%= parte.id %>">
              <% parte.productoParte.forEach(item=> { %>
                <tr>
                  <td class="text-center">
                    <strong>
                      <%= item.producto.nombre %>
                    </strong>
                  </td>
                  <td data-producto-cantidadAProducir="<%= item.cantidadAProducir %>" class="cantidadAProducir">
                    <%= item.cantidadAProducir %>
                  </td>
                  <td>
                    <!-- ACTUALIZAR CANTIDAD PRODUCIDA -->
                    <div class="d-flex justify-content-center align-items-center ">
                      <div class="col-md-8">
                        <input type="number" class="form-control cantidadProducida-input"
                          data-producto-id="<%= item.productoId %>" data-parte-id="<%= parte.id %>"
                          placeholder="Ingrese cantidad" value="<%= item.cantidadProducida %>">
                      </div>
                      <% if (porcentajeAvance != 100.00) { %>
                        <button type="button" class="btn btn-success actualizar-cantidadProducida-btn"><i
                          class="fa-solid fa-pen-to-square"></i></button>
                      <% } %>
                     
                    </div>

                  </td>
                  <td class="stockEnTallerInfo" data-stock-enTaller="<%= item.stockEnTaller %>">
                    <%= item.stockEnTaller %>
                  </td>
                  <td>
                    <!-- ACTUALIZAR EGRESOS -->
                    <div class="d-flex justify-content-center align-items-center ">
                      <div class="col-md-8">
                        <input type="number" class="form-control egresos-input"
                          data-producto-id="<%= item.productoId %>" placeholder="Ingrese cantidad"
                          value="<%= item.egresos %>">
                      </div>
                      <% if (porcentajeAvance != 100.00) { %>
                        <button type="button" class="btn btn-primary actualizar-egresos-btn"><i
                          class="fa-solid fa-pen-to-square"></i></button>
                      <% } %>
                      
                    </div>
                  </td>
                </tr>
                <% }) %>
            </tbody>
          </table>
        </div>

        
          <!-- CANVAS PARA MOSTRAR INSUMOS COMPARADOS Y REMANENTES-->
        <button class="btn btn-primary" type="button" data-bs-toggle="offcanvas" data-bs-target="#insumosRemanentes" aria-controls="insumosRemanentes">Ver insumos y remanentes</button>

        <div class="offcanvas offcanvas-end" tabindex="-1" id="insumosRemanentes" aria-labelledby="insumosRemanentesLabel">
            <div class="offcanvas-header">
                <h5 id="insumosRemanentesLabel">Insumos y Remanentes <i class="fa-solid fa-screwdriver-wrench"></i></h5>               
                <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
            </div>
            <div class="offcanvas-body">
                <ul class="list-group">
                    <% insumosComparados.forEach(item => { %>                    
                    <li class="list-group-item">
                        <p class="text-gray-600 m-0 fw-bolder"> <%= item.nombre %></p>
                        <p class="text-muted m-0">Cantidad Requerida: <%= item.cantidadRequerida %> <%= item.unidadDeMedida %></p>
                        <p class="text-muted mb-1" data-cantidad-adquirida="<%= item.cantidadAdquirida %>">Cantidad Adquirida: <%= item.cantidadAdquirida %> <%= item.unidadDeMedida %></p>
                        <p class="text-danger m-0 fw-bolder text-decoration-underline">Remanentes: <%= item.remanentes %> <%= item.unidadDeMedida %></p>
                        <% if (item.decomiso) { %>
                          <p class="text-danger mb-2 fw-bolder text-decoration-underline">Decomisos: <%= item.decomiso %> <%= item.unidadDeMedida %></p>
                        <% } %>
                        <% if (porcentajeAvance == 100.00 && !item.decomiso) { %>
                        <p class="text-muted m-0 text-center mb-2 fw-bolder">Informar Decomisos</p>
                        <div class="d-flex justify-content-center align-items-center">                                                  
                            <div class="col-md-8">                            
                                <input type="number" class="form-control decomiso" data-insumo-id="<%= item.id %>" data-parte-id="<%= parte.id %>" placeholder="Ingrese cantidad">
                                <input type="text" class="form-control expediente-decomiso mt-2" data-insumo-id="<%= item.id %>" data-parte-id="<%= parte.id %>" placeholder="Ingrese Expediente">
                            </div>                          
                            <button type="button" class="btn btn-primary informar-decomisos-btn"><i class="fa-solid fa-pen-to-square"></i></button>                                               
                        </div>
                        <% } %>                     
                    </li>
                    <hr>
                    <% }) %>                 
                </ul>                               
                <button id="informeRemanentes" data-remanentes-id="<%= parte.id %>" class="btn btn-success"><i class="fa-solid fa-file-excel"></i> Exportar Informe</button>
            </div>
        </div>   
    </main>

   



    <%- include('../../partials/scripts') %>

          <script>
            const icon = document.getElementById('userIconProfileSearch')
            const cardImg = document.getElementById('imgIcon')
            icon.addEventListener('error', () => {
              icon.src = 'https://cdn-icons-png.flaticon.com/512/149/149071.png'

            })

            cardImg.addEventListener('error', () => {
              cardImg.src = 'https://cdn-icons-png.flaticon.com/512/149/149071.png'
            })
          </script>
          <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
     
       
          <script>
            document.getElementById("enviarReporteBtn").onclick = function () {
              // Mostrar el alert
              let timerInterval;
              Swal.fire({
                title: "Enviando reporte via email!",
                html: "Enviando en <b></b>ms",
                timer: 3000,
                timerProgressBar: true,
                didOpen: () => {
                  Swal.showLoading();
                  const timer = Swal.getPopup().querySelector("b");
                  timerInterval = setInterval(() => {
                    timer.textContent = `${Swal.getTimerLeft()}`;
                  }, 100);
                },
                willClose: () => {
                  clearInterval(timerInterval);
                }
              }).then((result) => {
                /* Read more about handling dismissals below */
                if (result.dismiss === Swal.DismissReason.timer) {
                  console.log("I was closed by the timer");
                }
              });

              // Redirigir al usuario después de mostrar el alert
              window.location.href = this.querySelector("a").href;
            };
          </script>

          <script>

            document.addEventListener('DOMContentLoaded', () => {

              //Fetch para exportar informe de remanentes en excell

              const buttonInformeRemanentes = document.getElementById('informeRemanentes');
              const proyectId = buttonInformeRemanentes.getAttribute('data-remanentes-id');
              
              buttonInformeRemanentes.addEventListener('click', async function() {
                try {
                  const response = await fetch('http://localhost:3000/api/insumos/calculoRemanentes/', {
                    method: 'POST', 
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                      proyectoId: proyectId 
                    })
                  });

                  if (!response.ok) {
                    throw new Error('Error al exportar la consulta');
                  }

                  // Crear un enlace temporal para descargar el archivo
                  const blob = await response.blob();
                  const url = window.URL.createObjectURL(blob);
                  const a = document.createElement('a');
                  a.href = url;
                  a.download = 'informeRemanentes.xlsx';
                  document.body.appendChild(a);
                  a.click();
                  a.remove();
                  window.URL.revokeObjectURL(url);

                } catch (error) {
                  console.error('Error:', error);
                  alert('Error al exportar la consulta');
                }
              });

              //fetch para actualziar la cantidad producida

              document.querySelectorAll('.actualizar-cantidadProducida-btn').forEach(btn => {
                btn.addEventListener('click', async function () {
                  const tbody = document.getElementById('<%= parte.id %>');
                  const proyectoId = tbody.id
                  const productoId = this.parentElement.querySelector('.cantidadProducida-input').getAttribute('data-producto-id');
                  const cantidad = this.parentElement.querySelector('.cantidadProducida-input').value
                  const cantidadAProducir = document.querySelector('.cantidadAProducir').getAttribute('data-producto-cantidadAProducir');


                  //Validad que cantidad no sea negativo o cero

                  if (cantidad <= 0) {
                    Swal.fire({
                      icon: "error",
                      title: "Oops...",
                      text: "La cantidad no puede ser cero o menor",
                      footer: '<a href="/">Volver al inicio</a>'
                    });
                    return;
                  };

                  if(cantidad > +cantidadAProducir){
                    Swal.fire({
                      icon: "error",
                      title: "Oops...",
                      text: "No puede ser mayor que la cantidad a producir",
                      footer: '<a href="/">Volver al inicio</a>'
                    });
                    setTimeout(() => {
                      location.reload();
                    }, 1500)                   
                    return;
                  }

                  try {
                    const response = await fetch(`http://localhost:3000/api/stock/cantidadProducida/${proyectoId}`, {
                      method: 'PUT',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify(
                        {
                          productoId: productoId,
                          cantidad: cantidad
                        }
                      )
                    });

                    if (response.ok) {
                      Swal.fire("¡Cantidad actualizada!");
                      setTimeout(() => {
                        location.reload();
                      }, 2000);
                    } else {
                      console.error(error);
                      Swal.fire({
                        icon: "error",
                        title: "Oops...",
                        text: "Algo salió mal",
                        footer: '<a href="/">Volver al inicio</a>'
                      });
                    }

                  } catch (error) {
                    throw new Error('Error al actualizar el costo');
                  }

                })
              })
            });

            //fetch para actualizar los egresos
            document.querySelectorAll('.actualizar-egresos-btn').forEach(btn => {
              btn.addEventListener('click', async function () {
                const tbody = document.getElementById('<%= parte.id %>');
                const proyectoId = tbody.id
                const productoId = this.parentElement.querySelector('.egresos-input').getAttribute('data-producto-id');
                const egresos = this.parentElement.querySelector('.egresos-input').value;
                const stockEnTallerInfo = document.querySelector('.stockEnTallerInfo').getAttribute('data-stock-enTaller');



                // Validar que el costo no sea negativo
                if (egresos <= 0) {
                  Swal.fire({
                    icon: "error",
                    title: "Oops...",
                    text: "El egreso no puede ser negativo",
                    footer: '<a href="/">Volver al inicio</a>'
                  });
                  return;
                }

                if(egresos > +stockEnTallerInfo)
                Swal.fire({
                    icon: "error",
                    title: "Oops...",
                    text: "No hay stock suficiente para este retiro",
                    footer: '<a href="/">Volver al inicio</a>'
                  });
                  return;

                try {

                  const response = await fetch(`http://localhost:3000/api/stock/egresos/${proyectoId}`, {
                    method: 'PUT',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                      productoId: productoId,
                      egresos: egresos
                    })
                  })

                  const responseData = await response.json();
                  if (response.ok) {
                    // Si la respuesta es exitosa, muestra un mensaje de éxito
                    Swal.fire("¡Egresos actualizados!");
                    setTimeout(() => {
                      location.reload();
                    }, 2000);
                  } else {
                    // Si hay un error en la respuesta, muestra el mensaje de error proporcionado por el servidor
                    Swal.fire({
                      icon: "error",
                      title: "Oops...",
                      text: responseData.error.message || "Algo salió mal",
                      footer: '<a href="/">Volver al inicio</a>'
                    });
                  }
                } catch (error) {
                  // Si hay un error en la solicitud, muestra un mensaje genérico de error
                  console.error('Error al procesar la solicitud:', error);
                  Swal.fire({
                    icon: "error",
                    title: "Oops...",
                    text: "Error al procesar la solicitud. Por favor, inténtelo de nuevo más tarde.",
                    footer: '<a href="/">Volver al inicio</a>'
                  });
                }
              })
            })

            //FETCH PARA ACTUALIZAR LAS OBSERVACIONES
            document.querySelectorAll('.actualizar-observaciones-btn').forEach(btn => {
              btn.addEventListener('click', async function () {
                const tbody = document.getElementById('<%= parte.id %>');
                const proyectoId = tbody.id
                const observaciones = document.querySelector('.observaciones-input').value

                //validaciones

                if (observaciones.length === 0) {
                  Swal.fire({
                    icon: "error",
                    title: "Oops...",
                    text: "Debes ingresar las observaciones",
                    footer: '<a href="/">Volver al inicio</a>'
                  });
                  return;
                }


                if (observaciones.length > 500) {
                  Swal.fire({
                    icon: "error",
                    title: "Oops...",
                    text: "Menos de 500 caracteres",
                    footer: '<a href="/">Volver al inicio</a>'
                  });
                  return;
                }

                try {

                  const response = await fetch(`http://localhost:3000/api/stock/observaciones/${proyectoId}`, {
                    method: 'PUT',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                      observaciones
                    })
                  })

                  if (response.ok) {
                    Swal.fire("¡Observaciones Actualizadas!");
                    setTimeout(() => {
                      location.reload();
                    }, 2000);
                  } else {
                    console.error(error);
                    Swal.fire({
                      icon: "error",
                      title: "Oops...",
                      text: "Algo salió mal",
                      footer: '<a href="/">Volver al inicio</a>'
                    });
                  }

                } catch (error) {
                  throw new Error('Error al actualizar las observaciones');
                  console.log(error);
                }

              })

              /* FETCH CON INFORME DEL PROYECTO AL 50% Y AL 100% */

              const buttonAvance = document.getElementById('buttonAvance');
              const avance = buttonAvance.getAttribute('data-porcentaje-avance'); //capturo el avance para poder despirar los fetch en mis condicionales
              const buttonInformeRemanentes = document.getElementById('informeRemanentes');
              const proyectId = buttonInformeRemanentes.getAttribute('data-remanentes-id');

              async function informeAvance() {
              const response = await fetch('http://localhost:3000/api/insumos/informeAvance/', {
                    method: 'POST', 
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                      proyectoId: proyectId 
                    })
                  });

                  if (!response.ok) {
                    throw new Error('Error al exportar la consulta');
                  }

                  // Crear un enlace temporal para descargar el archivo
                  const blob = await response.blob();
                  const url = window.URL.createObjectURL(blob);
                  const a = document.createElement('a');
                  a.href = url;
                  a.download = 'informeProyecto%.xlsx';
                  document.body.appendChild(a);
                  a.click();
                  a.remove();
                  window.URL.revokeObjectURL(url);
              }

              async function informarRemanentes() {
                  const response = await fetch('http://localhost:3000/api/insumos/calculoRemanentes/', {
                    method: 'POST', 
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                      proyectoId: proyectId 
                    })
                  });

                  if (!response.ok) {
                    throw new Error('Error al exportar la consulta');
                  }

                  // Crear un enlace temporal para descargar el archivo
                  const blob = await response.blob();
                  const url = window.URL.createObjectURL(blob);
                  const a = document.createElement('a');
                  a.href = url;
                  a.download = 'informeRemanentesProyectoAl100%.xlsx';
                  document.body.appendChild(a);
                  a.click();
                  a.remove();
                  window.URL.revokeObjectURL(url);
                      }

              if (avance == 50) {
                try {
                    Swal.fire({
                    title: "Proyecto al 50%",
                    text: "Debes descargar el informe para poder enviarlo luego",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Descargar Informe",
                    cancelButtonText:'Ya lo descargué'
                  }).then((result) => {
                    if (result.isConfirmed) {
                      informeAvance()
                    }
                  });
                  
                  
                } catch (error) {
                  throw new Error('Error al exportar informe al 50%');
                  console.log(error);
                }
              } else if(avance == 100) {
                try {

                  Swal.fire({
                    title: "Proyecto al 100%",
                    text: "Debes descargar el informe para poder enviarlo luego",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Descargar Informe",
                    cancelButtonText:'Ya lo descargué'
                  }).then((result) => {
                    if (result.isConfirmed) {
                      informeAvance()
                      informarRemanentes()
                    }
                  });              
                } catch (error) {
                  throw new Error('Error al exportar informe al 100%');
                  console.log(error);
                }
              } 
              
              
              /* INFORMAR DECOMISOS */

              const buttons = document.querySelectorAll('.informar-decomisos-btn');



              buttons.forEach(button => { 
              button.addEventListener('click', async () => {
                try {
                    // Obtener los elementos input relacionados
                    const decomisoInput = button.parentElement.querySelector('.decomiso');
                    const expedienteInput = button.parentElement.querySelector('.expediente-decomiso');
                    const cantidadAdquiridaElement = button.closest('.list-group-item').querySelector('[data-cantidad-adquirida]');

                    // Extraer los valores de los inputs
                    const decomiso = decomisoInput.value;
                    const expediente = expedienteInput.value;
                    const insumoId = decomisoInput.getAttribute('data-insumo-id');
                    const proyectId = decomisoInput.getAttribute('data-parte-id'); 
                    const cantidadAdquirida = parseFloat(cantidadAdquiridaElement.getAttribute('data-cantidad-adquirida'));

                    // Validar los valores
                    if (!decomiso || !expediente) {
                      Swal.fire({
                      icon: "error",
                      title: "Oops...",
                      text: "Debes completar todos los campos",                     
                    });
                        return;
                    }

                    // Validar que el decomiso sea mayor o igual que la cantidad adquirida
                    if (+decomiso > cantidadAdquirida) {
                        Swal.fire({
                            icon: "error",
                            title: "Oops...",
                            text: "La cantidad decomisada no puede superar la cantidad adquirida.",                     
                        });
                        return;
                    }

                    // Crear el objeto a enviar
                    const body = {
                        proyectId: proyectId,
                        insumoId: insumoId,
                        decomiso: parseInt(decomiso),
                        expediente: expediente
                    };

                    // Hacer la solicitud fetch
                    const response = await fetch('http://localhost:3000/api/insumos/decomisos/', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(body)
                    });

                    const result = await response.json();

                    if (result.ok) {
                      Swal.fire({
                      position: "top-end",
                      icon: "success",
                      title: "Decomiso informado!",
                      showConfirmButton: false,
                      timer: 1500
                    });
                      setTimeout(() => {
                      location.reload();
                    }, 1500);
                    } else {
                        alert(`Error: ${result.error.message}`);
                    }
                } catch (error) {
                    console.error('Error al informar decomisos:', error);
                    alert('Ocurrió un error al informar decomisos.');
                }
            });
        });

            })
          </script>

        
  </body>

</html>