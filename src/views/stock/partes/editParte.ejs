<!DOCTYPE html>
<html lang="en">

<%- include('../../partials/head') %>


  <body>

    <nav class="navbar navbar-expand-sm navbar-light bg-light shadow-3">
      <div class="container">
        <div class="d-flex">
          <!-- Botón para abrir el menú a la izquierda -->
          <button class="navbar-toggler d-lg-none order-0 me-2" type="button" data-bs-toggle="collapse"
            data-bs-target="#collapsibleNavId" aria-controls="collapsibleNavId" aria-expanded="false"
            aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
          </button>

          <!-- Botón para abrir el menú canvas a la derecha -->
          <button class="btn btn-transparent order-1" type="button" data-bs-toggle="offcanvas"
            data-bs-target="#offcanvasRight" aria-controls="offcanvasRight">
            <img id="userIconProfile"
              src="<%= /http/.test(userLogin.icon) ? userLogin.icon : `/images/iconsProfile/${userLogin.icon}` %>"
              class="iconProfile me-2" alt="" />
            <%= userLogin.name %><i class="fa-solid fa-caret-down fa-lg"></i>
          </button>
        </div>

        <!-- Menú de navegación -->
        <div class="collapse navbar-collapse" id="navbarNav">
          <ul class="navbar-nav ms-auto"> <!-- 'ms-auto' para alinear a la derecha -->
            <li class="nav-item">
              <a class="nav-link" href="/stock/partes">Regresar</a>
            </li>
          </ul>
        </div>
      </div>
    </nav> <br>

    <main>
      <%- include('../../partials/modals') %> <%- include('../../partials/canvasMenu') %>
      <div class="row ms-3 me-3 justify-content-center mb-5">
        <div class="col-md-12">

          <div class="card text-center mb-5">
            <div class="card-header">
              Parte semanal: <%= parte.nombre %> / <small>
                  <%= parte.expediente %>
                </small>
                <div class="container d-flex justify-content-center gap-2">
                  <button type="button" class="btn btn-primary btn-sm "><strong><i
                        class="fa-solid fa-screwdriver-wrench"></i> ideal: <%= ideal %> por <%= parte.unidadDuracion %>
                    </strong></button>
                  <button type="button" class="btn btn-success btn-sm"><strong><i
                        class="fa-solid fa-screwdriver-wrench"></i> real: <%= real %> por <%= parte.unidadDuracion %>
                    </strong></button>
                  <button type="button" class="btn btn-danger btn-sm"><strong><i class="fa-solid fa-percent"></i> de
                      avance: Proyecto al <%= porcentajeAvance %> %
                    </strong></button>
                </div>
            </div>
            <div class="card-body">
              <p class="card-text h6 text-justify">
                <%= parte.observaciones %> <% if (parte.remanentes === null) { %>
                  <button type="button" class="btn btn-danger custom-btn"
                    data-bs-toggle="modal" data-bs-target="#observaciones<%= parte.id %>" data-bs-whatever="@mdo">
                    <i class="fa-solid fa-pen-to-square"></i>
                  </button>
                <% } %> 

              </p>

              <div class="modal fade" id="observaciones<%= parte.id %>" tabindex="-1"
                aria-labelledby="observacionesLabel" aria-hidden="true">
                <div class="modal-dialog">
                  <div class="modal-content">
                    <div class="modal-header">
                      <h5 class="modal-title" id="observacionesLabel">Observaciones</h5>
                      <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">

                      <div class="mb-3 text-center">
                        <textarea class="form-control observaciones-input"
                          id="message-text"><%= parte.observaciones %></textarea>
                      </div>

                    </div>
                    <div class="modal-footer">
                      <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                      <button type="button" class="btn btn-primary actualizar-observaciones-btn">Enviar</button>
                    </div>
                  </div>
                </div>
              </div>
              <button type="button" class="btn btn-outline-primary  btn-sm mt-1 mb-2">
                <a class="btn-link" href="/stock/parte/<%= parte.id %>"><i class="fa-solid fa-download"></i>
                  Parte de stock</i></a>
              </button>
              <button type="button" class="btn btn-outline-danger  btn-sm mt-1 mb-2">
                <a class="btn-link" href="/stock/parteInsumos/<%= parte.id %>"><i class="fa-solid fa-download"></i>
                  Parte de insumos</i></a>
              </button>
              <button type="button" class="btn btn-outline-success ms-2  btn-sm mt-1 mb-2" id="enviarReporteBtn">
                <a class="btn-link" href="/stock/reporte/<%= parte.id %>"><i class="fa-solid fa-paper-plane"></i> Enviar
                  Reportes</i></a>
              </button>
            </div>
            <div class="card-footer text-muted"><i class="fa-solid fa-clock"></i> Última Actualización
              <%= new Intl.DateTimeFormat('es-AR', { year: 'numeric' , month: 'long' , day: 'numeric' , hour: 'numeric'
                , minute: 'numeric' , second: 'numeric' , timeZone: 'America/Argentina/Buenos_Aires' }).format(new
                Date(parte.updatedAt)) %>
            </div>
          </div>

          <!-- TABLA PARA EDICIÓN DE INFO -->

          <table class="table">
            <thead>
              <tr>
                <th scope="col">Producto</th>
                <th scope="col">Cantidad a Producir</th>
                <th scope="col">Cantidad Producida</th>
                <th scope="col">Stock en Taller</th>
                <th scope="col">Egresos</th>
              </tr>
            </thead>
            <tbody id="<%= parte.id %>">
              <% parte.productoParte.forEach(item=> { %>
                <tr>
                  <td class="text-center">
                    <strong>
                      <%= item.producto.nombre %>
                    </strong>
                  </td>
                  <td>
                    <%= item.cantidadAProducir %>
                  </td>
                  <td>
                    <!-- ACTUALIZAR CANTIDAD PRODUCIDA -->
                    <div class="d-flex justify-content-center align-items-center ">
                      <div class="col-md-8">
                        <input type="number" class="form-control cantidadProducida-input"
                          data-producto-id="<%= item.productoId %>" data-parte-id="<%= parte.id %>"
                          placeholder="Ingrese cantidad" value="<%= item.cantidadProducida %>">
                      </div>
                      <% if (parte.remanentes === null) { %>
                        <button type="button" class="btn btn-success actualizar-cantidadProducida-btn"><i
                          class="fa-solid fa-pen-to-square"></i></button>
                      <% } %>
                     
                    </div>

                  </td>
                  <td>
                    <%= item.stockEnTaller %>
                  </td>
                  <td>
                    <!-- ACTUALIZAR EGRESOS -->
                    <div class="d-flex justify-content-center align-items-center ">
                      <div class="col-md-8">
                        <input type="number" class="form-control egresos-input"
                          data-producto-id="<%= item.productoId %>" placeholder="Ingrese cantidad"
                          value="<%= item.egresos %>">
                      </div>
                      <% if (parte.remanentes === null) { %>
                        <button type="button" class="btn btn-primary actualizar-egresos-btn"><i
                          class="fa-solid fa-pen-to-square"></i></button>
                      <% } %>
                      
                    </div>
                  </td>
                </tr>
                <% }) %>
            </tbody>
          </table>
        </div>

        
            <!-- CANVAS PARA MOSTRAR INSUMOS COMPARADOS Y REMANENTES-->
            <button class="btn btn-primary" type="button" data-bs-toggle="offcanvas" data-bs-target="#insumosRemanentes" aria-controls="insumosRemanentes">Ver insumos y remanentes</button>

            <div class="offcanvas offcanvas-end" tabindex="-1" id="insumosRemanentes" aria-labelledby="insumosRemanentesLabel">
              <div class="offcanvas-header">
                <h5 id="insumosRemanentesLabel">Insumos y Remanentes <i class="fa-solid fa-screwdriver-wrench"></i></h5>               
              
                <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
              </div>
              <div class="offcanvas-body">
                <ul class="list-group">
                  <% insumosComparados.forEach(item => { %>                    
                    <li class="list-group-item ">
                        <p class="text-gray-600 m-0 fw-bolder"> <%= item.nombre %></p>
                        <p class="text-muted m-0">Cantidad Requerida: <%= item.cantidadRequerida %> <%= item.unidadDeMedida %></p>
                        <p class="text-muted m-0">Cantidad Adquirida: <%= item.cantidadAdquirida %> <%= item.unidadDeMedida %></p>
                        <p class="text-danger mt-1 fw-bolder text-decoration-underline">Remanentes: <%= item.remanentes %> <%= item.unidadDeMedida %> </p>
                    </li>
                    <hr>
                    <% }) %>                 
                </ul> 
                
                <button class="btn btn-success"><i class="fa-solid fa-file-excel"></i> Exportar Informe</button>
              </div>
            </div>
   
    </main>

   



    <%- include('../../partials/scripts') %>

    <script>
      const icon = document.getElementById('userIconProfileSearch')
      const cardImg = document.getElementById('imgIcon')
      icon.addEventListener('error', () => {
        icon.src = 'https://cdn-icons-png.flaticon.com/512/149/149071.png'

      })

      cardImg.addEventListener('error', () => {
        cardImg.src = 'https://cdn-icons-png.flaticon.com/512/149/149071.png'
      })
    </script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <% if ( (parte.remanentes) && (parte.remanentes.length > 0) && (porcentajeAvance == 100)  ) { %>
      <script>
        Swal.fire({
          position: "top-end",
          icon: "success",
          title: "Proyecto Finalizado y Remantenes informados",
          showConfirmButton: false,
          timer: 1500
        });
      </script>
      <% } else { %>
        <script>
          // @ts-ignore
          const avance = <%= porcentajeAvance %>;

          // Verifica que el avance sea igual a 100.00 para mostrar la alerta
          if (avance === 100.00) {
            Swal.fire({
              title: "¡Se alcanzó la cantidad a producir!",
              text: "Necesitas informar los remanentes",
              icon: "success",
              confirmButtonText: "Informar",
              input: "textarea",
              inputPlaceholder: "Ingrese los remanentes aquí...",
              inputAttributes: {
                "aria-label": "Ingrese los remanentes aquí"
              },
              showLoaderOnConfirm: true,
              preConfirm: async (text) => {
                try {
                  // Validar la longitud de los remanentes
                  if (text.length > 1000) {
                    throw new Error("Los remanentes no pueden tener más de 1000 caracteres.");
                  }

                  // Obtener el ID de la parte
                  const id = <%= parte.id %>;
              console.log("ID de la parte:", id);

              // Realizar la solicitud de actualización de remanentes
              const response = await fetch(`http://localhost:3000/api/stock/remanentes/${id}`, {
                method: 'PUT',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({ remanentes: text })
              });

              // Verificar si la solicitud se realizó correctamente
              if(!response.ok) {
              throw new Error("Error al informar remanentes. Por favor, inténtelo de nuevo más tarde.");
            }
            return response.json();
          } catch (error) {
            throw new Error(`Error inesperado: ${error}`);
          }
            }
          }).then((result) => {
            if (result.isConfirmed) {
              Swal.fire({
                title: "Remanentes informados con éxito!",
                icon: "success",
              });
            }
          }).catch((error) => {
            Swal.fire({
              title: "Error",
              text: error.message,
              icon: "error",
            });
          });
        }
        </script>
        <% } %>








          <script>
            document.getElementById("enviarReporteBtn").onclick = function () {
              // Mostrar el alert
              let timerInterval;
              Swal.fire({
                title: "Enviando reporte via email!",
                html: "Enviando en <b></b>ms",
                timer: 3000,
                timerProgressBar: true,
                didOpen: () => {
                  Swal.showLoading();
                  const timer = Swal.getPopup().querySelector("b");
                  timerInterval = setInterval(() => {
                    timer.textContent = `${Swal.getTimerLeft()}`;
                  }, 100);
                },
                willClose: () => {
                  clearInterval(timerInterval);
                }
              }).then((result) => {
                /* Read more about handling dismissals below */
                if (result.dismiss === Swal.DismissReason.timer) {
                  console.log("I was closed by the timer");
                }
              });

              // Redirigir al usuario después de mostrar el alert
              window.location.href = this.querySelector("a").href;
            };
          </script>

          <script>

            document.addEventListener('DOMContentLoaded', () => {
              //fetch para actualziar la cantidad producida

              document.querySelectorAll('.actualizar-cantidadProducida-btn').forEach(btn => {
                btn.addEventListener('click', async function () {
                  const tbody = document.getElementById('<%= parte.id %>');
                  const proyectoId = tbody.id
                  const productoId = this.parentElement.querySelector('.cantidadProducida-input').getAttribute('data-producto-id');
                  const cantidad = this.parentElement.querySelector('.cantidadProducida-input').value


                  //Validad que cantidad no sea negativo o cero

                  if (cantidad <= 0) {
                    Swal.fire({
                      icon: "error",
                      title: "Oops...",
                      text: "La cantidad no puede ser cero o menor",
                      footer: '<a href="/">Volver al inicio</a>'
                    });
                    return;
                  };

                  try {
                    const response = await fetch(`http://localhost:3000/api/stock/cantidadProducida/${proyectoId}`, {
                      method: 'PUT',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify(
                        {
                          productoId: productoId,
                          cantidad: cantidad
                        }
                      )
                    });

                    if (response.ok) {
                      Swal.fire("¡Cantidad actualizada!");
                      setTimeout(() => {
                        location.reload();
                      }, 2000);
                    } else {
                      console.error(error);
                      Swal.fire({
                        icon: "error",
                        title: "Oops...",
                        text: "Algo salió mal",
                        footer: '<a href="/">Volver al inicio</a>'
                      });
                    }

                  } catch (error) {
                    throw new Error('Error al actualizar el costo');
                  }

                })
              })
            });

            //fetch para actualizar los egresos
            document.querySelectorAll('.actualizar-egresos-btn').forEach(btn => {
              btn.addEventListener('click', async function () {
                const tbody = document.getElementById('<%= parte.id %>');
                const proyectoId = tbody.id
                const productoId = this.parentElement.querySelector('.egresos-input').getAttribute('data-producto-id');
                const egresos = this.parentElement.querySelector('.egresos-input').value;



                // Validar que el costo no sea negativo
                if (egresos < 0) {
                  Swal.fire({
                    icon: "error",
                    title: "Oops...",
                    text: "El egreso no puede ser negativo",
                    footer: '<a href="/">Volver al inicio</a>'
                  });
                  return;
                }

                try {

                  const response = await fetch(`http://localhost:3000/api/stock/egresos/${proyectoId}`, {
                    method: 'PUT',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                      productoId: productoId,
                      egresos: egresos
                    })
                  })

                  const responseData = await response.json();
                  if (response.ok) {
                    // Si la respuesta es exitosa, muestra un mensaje de éxito
                    Swal.fire("¡Egresos actualizados!");
                    setTimeout(() => {
                      location.reload();
                    }, 2000);
                  } else {
                    // Si hay un error en la respuesta, muestra el mensaje de error proporcionado por el servidor
                    Swal.fire({
                      icon: "error",
                      title: "Oops...",
                      text: responseData.error.message || "Algo salió mal",
                      footer: '<a href="/">Volver al inicio</a>'
                    });
                  }
                } catch (error) {
                  // Si hay un error en la solicitud, muestra un mensaje genérico de error
                  console.error('Error al procesar la solicitud:', error);
                  Swal.fire({
                    icon: "error",
                    title: "Oops...",
                    text: "Error al procesar la solicitud. Por favor, inténtelo de nuevo más tarde.",
                    footer: '<a href="/">Volver al inicio</a>'
                  });
                }
              })
            })

            //FETCH PARA ACTUALIZAR LAS OBSERVACIONES
            document.querySelectorAll('.actualizar-observaciones-btn').forEach(btn => {
              btn.addEventListener('click', async function () {
                const tbody = document.getElementById('<%= parte.id %>');
                const proyectoId = tbody.id
                const observaciones = document.querySelector('.observaciones-input').value

                //validaciones

                if (observaciones.length === 0) {
                  Swal.fire({
                    icon: "error",
                    title: "Oops...",
                    text: "Debes ingresar las observaciones",
                    footer: '<a href="/">Volver al inicio</a>'
                  });
                  return;
                }


                if (observaciones.length > 500) {
                  Swal.fire({
                    icon: "error",
                    title: "Oops...",
                    text: "Menos de 500 caracteres",
                    footer: '<a href="/">Volver al inicio</a>'
                  });
                  return;
                }

                try {

                  const response = await fetch(`http://localhost:3000/api/stock/observaciones/${proyectoId}`, {
                    method: 'PUT',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                      observaciones
                    })
                  })

                  if (response.ok) {
                    Swal.fire("¡Observaciones Actualizadas!");
                    setTimeout(() => {
                      location.reload();
                    }, 2000);
                  } else {
                    console.error(error);
                    Swal.fire({
                      icon: "error",
                      title: "Oops...",
                      text: "Algo salió mal",
                      footer: '<a href="/">Volver al inicio</a>'
                    });
                  }

                } catch (error) {
                  throw new Error('Error al actualizar las observaciones');
                  console.log(error);
                }

              })
            })



          </script>

        
  </body>

</html>